(function($) { 'use strict'; var loadedImages= {}, slice= Array.prototype.slice, toString= Object.prototype.toString, corners= ['Top', 'Right', 'Bottom', 'Left'], backgroundProperties= [ 'Attachment', 'Color', 'Image', 'Repeat', 'Position', 'Size', 'Clip', 'Origin' ]; $.fn.bgswitcher= function() { var args= arguments, instanceKey= BgSwitcher.keys.instance; return this.each(function() { var instance= $.data(this, instanceKey); if (!instance) { instance= new BgSwitcher(this); $.data(this, instanceKey, instance);} instance.dispatch.apply(instance, args);});}; $.fn.bgSwitcher= $.fn.bgswitcher; function BgSwitcher(el) { this.$el= $(el); this.index= 0; this.config= $.extend({}, BgSwitcher.defaultConfig); this._setupBackgroundElement(); this._listenToResize();} $.extend(BgSwitcher.prototype, { dispatch: function(one) { switch (toString.call(one)) { case '[object Object]':
this.setConfig(one); break; case '[object String]':
this[one].apply(this, slice.call(arguments, 1)); break; default:
throw new Error('Please specify a Object or String');}}, setConfig: function(config) { this.config= $.extend(this.config, config); if (typeof this.config.random !== 'undefined') { this.config.shuffle= this.config.random;} this.refresh();}, setImages: function(images) { this.imageList= new this.constructor.ImageList(images); if (this.config.shuffle) { this.imageList.shuffle();}}, setSwitchHandler: function(fn) { this.switchHandler= $.proxy(fn, this);}, getBuiltInSwitchHandler: function(type) { return this.constructor.switchHandlers[type || this.config.effect];}, refresh: function() { this.setImages(this.config.images); this.setSwitchHandler(this.getBuiltInSwitchHandler()); this._prepareSwitching(); if (this.config.start) { this.start();}}, start: function() { if (!this._timerID) { this._timerID= setTimeout($.proxy(this, 'next'), this.config.interval);}}, stop: function() { if (this._timerID) { clearTimeout(this._timerID); this._timerID= null;}}, toggle: function() { if (this._timerID) { this.stop();} else { this.start();}}, reset: function() { this.index= 0; this._prepareSwitching();}, next: function() { var max= this.imageList.count(); if (!this.config.loop && this.index + 1=== max) { return;} if (++this.index=== max) { this.index= 0;} this.switching();}, prev: function() { if (!this.config.loop && this.index=== 0) { return;} if (--this.index=== -1) { this.index= this.imageList.count() - 1;} this.switching();}, select: function(index) { if (index=== -1) { index= this.imageList.count() - 1;} this.index= index; this.switching();}, switching: function() { var started= !!this._timerID; if (started) { this.stop();} this._createSwitchableElement(); this._prepareSwitching(); this.switchHandler(this.$switchable); if (started) { this.start();}}, destroy: function() { this.stop(); this._stopListeningToResize(); if (this.$switchable) { this.$switchable.stop(); this.$switchable.remove(); this.$switchable= null;} if (this.$bg) { this.$bg.remove(); this.$bg= null;} this.$el.removeAttr('style'); this.$el.removeData(this.constructor.keys.instance); this.$el= null;}, _adjustRectangle: function() { var corner, i= 0, length= corners.length, offset= this.$el.position(), copiedStyles= { top: offset.top, left: offset.left, width: this.$el.innerWidth(), height: this.$el.innerHeight() }; for (; i < length; i++) { corner= corners[i]; copiedStyles['margin' + corner]= this.$el.css('margin' + corner); copiedStyles['border' + corner]= this.$el.css('border' + corner);} this.$bg.css(copiedStyles);}, _setupBackgroundElement: function() { this.$bg= $(document.createElement('div')); this.$bg.css({ position: 'absolute', zIndex: (parseInt(this.$el.css('zIndex'), 10) || 0) - 1, overflow: 'hidden'
}); this._copyBackgroundStyles(); this._adjustRectangle(); if (this.$el[0].tagName=== 'BODY') { this.$el.prepend(this.$bg);} else { this.$el.before(this.$bg); this.$el.css('background', 'none');}}, _createSwitchableElement: function() { if (this.$switchable) { this.$switchable.remove();} this.$switchable= this.$bg.clone(); this.$switchable.css({top: 0, left: 0, margin: 0, border: 'none'}); this.$switchable.appendTo(this.$bg);}, _copyBackgroundStyles: function () { var prop, copiedStyle= {}, i= 0, length= backgroundProperties.length, backgroundPosition= 'backgroundPosition'; for (; i < length; i++) { prop= 'background' + backgroundProperties[i]; copiedStyle[prop]= this.$el.css(prop);} if (copiedStyle[backgroundPosition]=== undefined) { copiedStyle[backgroundPosition]= [ this.$el.css(backgroundPosition + 'X'), this.$el.css(backgroundPosition + 'Y') ].join(' ');} this.$bg.css(copiedStyle);}, _listenToResize: function() { var that= this; this._resizeHandler= function() { that._adjustRectangle();}; $(window).on('resize', this._resizeHandler);}, _stopListeningToResize: function() { $(window).off('resize', this._resizeHandler); this._resizeHandler= null;}, _prepareSwitching: function() { this.$bg.css('backgroundImage', this.imageList.url(this.index));}}); BgSwitcher.keys= { instance: 'bgSwitcher'
}; BgSwitcher.defaultConfig= { images: [], interval: 5000, start: true, loop: true, shuffle: false, effect: 'fade', duration: 1000, easing: 'swing'
}; BgSwitcher.switchHandlers= { fade: function($el) { $el.animate({opacity: 0}, this.config.duration, this.config.easing);}, blind: function($el) { $el.animate({height: 0}, this.config.duration, this.config.easing);}, clip: function($el) { $el.animate({ top: parseInt($el.css('top'), 10) + $el.height() / 2, height: 0
}, this.config.duration, this.config.easing);}, slide: function($el) { $el.animate({top: -$el.height()}, this.config.duration, this.config.easing);}, drop: function($el) { $el.animate({ left: -$el.width(), opacity: 0
}, this.config.duration, this.config.easing);}, hide: function($el) { $el.hide();}}; BgSwitcher.defineEffect= function(name, fn) { this.switchHandlers[name]= fn;}; BgSwitcher.ImageList= function(images) { this.images= images; this.createImagesBySequence(); this.preload();}; $.extend(BgSwitcher.ImageList.prototype, { isSequenceable: function() { return typeof this.images[0]=== 'string' &&
typeof this.images[1]=== 'number' &&
typeof this.images[2]=== 'number';}, createImagesBySequence: function() { if (!this.isSequenceable()) { return;} var images= [], base= this.images[0], min= this.images[1], max= this.images[2]; do { images.push(base.replace(/\.\w+$/, min + '$&'));} while (++min <= max); this.images= images;}, preload: function() { var path, length= this.images.length, i= 0; for (; i < length; i++) { path= this.images[i]; if (!loadedImages[path]) { loadedImages[path]= new Image(); loadedImages[path].src= path;}} }, shuffle: function() { var j, t, i= this.images.length, original= this.images.join(); if (!i) { return;} while (i) { j= Math.floor(Math.random() * i); t= this.images[--i]; this.images[i]= this.images[j]; this.images[j]= t;} if (this.images.join()=== original) { this.shuffle();}}, get: function(index) { return this.images[index];}, url: function(index) { return 'url(' + this.get(index) + ')';}, count: function() { return this.images.length;}}); $.BgSwitcher= BgSwitcher;}(jQuery)); 